package models;

import java.util.Date;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.context.FacesContext;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import entities.Articles_Approvisionnement_Operations;

/**
 * ArticlesApprovisionnement generated by hbm2java
 */
@Entity (name = "articles_approvisionnement")
@Table(name = "articles_approvisionnement", catalog = "g_stock")
@ManagedBean(name="ArticlesApprovisionnement")
public class ArticlesApprovisionnement implements java.io.Serializable {

	private int codeArt;
	private int qteCommande;
	private Date datePrevueLivraison;
	public static Articles_Approvisionnement_Operations dbObj;
	Date   today = new Date();

	public ArticlesApprovisionnement() {
	}

	public ArticlesApprovisionnement(int codeArt, int qteCommande, Date datePrevueLivraison) {
		this.codeArt = codeArt;
		this.qteCommande = qteCommande;
		this.datePrevueLivraison = datePrevueLivraison;
	}

	@Id

	@Column(name = "codeArt", unique = true, nullable = false)
	public int getCodeArt() {
		return this.codeArt;
	}

	public void setCodeArt(int codeArt) {
		this.codeArt = codeArt;
	}

	@Column(name = "qteCommande", nullable = false)
	public int getQteCommande() {
		return this.qteCommande;
	}

	public void setQteCommande(int qteCommande) {
		this.qteCommande = qteCommande;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "datePrevueLivraison", nullable = false, length = 10)
	public Date getDatePrevueLivraison() {

		return this.datePrevueLivraison;
	}

	public void setDatePrevueLivraison(Date datePrevueLivraison) {
		this.datePrevueLivraison = datePrevueLivraison;
	}
	
	public void addMessage(FacesMessage.Severity severity, String summary, String detail) { //pour afficher les messages d'erreurs , Avertissement , succés
        FacesContext.getCurrentInstance().
                addMessage(null, new FacesMessage(severity, summary, detail));
    }
	
     public void insert() {  //controle du formulaire et passer les valeurs à la fonction insert_Appr en Articles_Approvisionnement_Operations
     
     System.out.print(today);
    	 if(getCodeArt()<=0) {
    	           addMessage(FacesMessage.SEVERITY_ERROR, "Code Art", "Article  code  must be positive");
    		}
    		else {
    			if(getQteCommande()<=0) {
    				addMessage(FacesMessage.SEVERITY_ERROR, "Quantité Article", "Quantité Article  must be positive");
    			}
    			else {
    				if(getDatePrevueLivraison()==null || getDatePrevueLivraison().before(today)) {
    					addMessage(FacesMessage.SEVERITY_ERROR, "Date de Livraison", "Date invalide");
    				} else {
    					dbObj = new Articles_Approvisionnement_Operations();
        				dbObj.insert_Appr(this);
    				}
    			}
    	   }
    		
	}
		 
	 public void deleteid(int codeArt) { //passer les valeurs à la fonction delete_stock en  Articles_Approvisionnement_Operations
	        dbObj = new Articles_Approvisionnement_Operations();
	        dbObj.delete_Appr(codeArt, this);
	    }
	 
	    public void update() { //passer les valeurs à la fonction delete_stock en  Articles_Approvisionnement_Operations
	    	if(getDatePrevueLivraison()!=null && getDatePrevueLivraison().after(today)) {
	    	dbObj = new Articles_Approvisionnement_Operations();   
	        dbObj.update_Appr(codeArt, this);
	    	}
	    	else {
	    		addMessage(FacesMessage.SEVERITY_WARN, "Date de Livraison", "Date saisie est passée");
	    	}
	    }
	    public String Statut(Date datliv) { //passer les valeurs au fonction
	    	 String stat=""; 
	    	 int dy = datliv.getYear();
             int ty = today.getYear();
             int dm = datliv.getMonth();
             int tm = today.getMonth();
             int dd = datliv.getDay();
             int td = today.getDay();
             int diff=dd-td;
             if(ty==dy && dm-tm>=0 && dm-tm<=1 && diff<=31&& diff>0) {
            
            		   stat= " "+(diff-1)+" jours restant";
            	 
            	
             }
		       else {
		    	   if(datliv.before(today)) {
		    		   stat= "Produit reçu";
		    	   }
		    	   else {
		    		   stat="Plus d'un mois";
		    	   }
		       }
			return stat;
		    }	
	    
          public String severity(Date datliv) { //passer les valeurs au fonction
             String stat="";
             int dy = datliv.getYear();
             int ty = today.getYear();
             int dm = datliv.getMonth();
             int tm = today.getMonth();
             int dd = datliv.getDay();
             int td = today.getDay();
             int diff=dd-td;
             if(ty==dy && dm-tm>=0 && dm-tm<=1 && diff>0 && diff<=31) {
            	
            		   stat= "warning";
            	 
            	
             }
             else {
	               if(datliv.before(today)) {
	                       stat="success";	   
	   }
	   else {
		 stat= "info";
	   }
   }
	return stat;
}	

 }
